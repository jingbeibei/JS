编程语言的分类：
===============================================================
声明式语言：
	没有变量、赋值、条件判断、显式循环（for/while）的语言
	HTML、CSS、SQL
	整个XML家族都是声明式（SVG/MathL/XSLT/XPath...）

命令式语言：
	有变量、赋值、条件判断、显示循环（for/while）的语言
	C家族（C++、C#）、JS、Java、OC、Swift、PHP...

函数式语言：
	不鼓励使用变量、赋值、显示循环的语言
	循环使用函数递归实现
	赋值通过函数的嵌套或链式调用实现
	更多时候使用常量
	F#、LISP	
	

AngularJs声明式的特点：
======================================================================
	在前端开发的过程中，不管是使用Backbone等框架还是不使用框架直接使用更轻量级jQuery脚本库，都会造成与用户界面和数据验证等相关的代码大量堆积
	AngularJs的作者继承并发扬了HTML语言声明性的特点，将大量繁锁的视图及数据验证类代码封装整合成【HTML属性】或【{{ }}表达式】甚至【自定义标签】，实际上是扩展了HTML语言，为HTML语言提供了更加丰富的功能，从而大大减少了命令式（JS）代码的使用


编程语言的发展过程
=======================================================================
机器语言            ->           汇编语言                        高级语言（命令式）                声明式
 程序员只能操作              汇编指令/语句              类似自然语言语句                  不再描述过程
CPU指令（通过               一条汇编语句可以       一条语句对应N条汇编            而是直接描述结果
数字编号调用）              代替N条机器指令                                                               一条声明式语句
								对应N条高级语言
=============================================================	================
都需要程序员告诉计算机怎样做（流程）才能得到想要结果		计算机/运行环境本身知道
编程就是把程序员“解题”思路记录下来				怎样做能得到结果，不需程序员
								提供“解题”的过程，程序员只需要
								描述想要的结果即可

AngularJs中模板化的特点1：
==================================================================
不需要额外的，单独定义模板，它的理念是HTML页面本身就是模板（模板就是HTML页面）
而在artTemplate、underscore、jade/pug、mastache等HTML模板化机制中，模板与
（页面的）HTML是分离的，模板需要套用数据解析成HTML字符串然后再插入到页面中

AngularJs中的模板化也是对HTML的扩展


AngularJs中模板化的特点2：
==================================================================
不需要手动解析（套用）模板生成HTML，而是由AngularJs自动完成的
不仅能够显示数据，而且能够实现数据变化的同步功能，即监视并跟踪数据的变更
当数据变化时自动双向同步修改（双向绑定）

重点是：程序员在这个过程中不需要写JS代码

	        模板解析/将数据绑定到页面上的标签元素中
       数据    =============================================>     页面
        模型   <=============================================     视图
                          如果数据被绑定到input等可以编辑的标签上，则
	         数据被修改时，可以立即更新原始数据（模型）






