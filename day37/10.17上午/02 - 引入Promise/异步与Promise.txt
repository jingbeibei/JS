通常JavaScript只使用一个线程执行代码
即单线程，包括浏览器中的JS和服务端Node.Js

所以在JS中不能以同步的方式执行
耗时较长的任务，如：网络请求，磁盘读写

在异步执行时需要提供一种通知机制，当耗时
任务执行完毕（或出现错误）时【通知】外面

最常见的通知机制是【回调函数】和【事件】

但回调函数和事件都存在一些不便于使用的问题：
1、回调函数和事件都在任务完成的时刻
       被触发一次，无法随意随时随地使用
       异步任务的结果；对于事件来说，如果
       错过了事件监听时机，则不可能再收到
       事件

2、如果试图解决第1个问题而定义变量记录
       异步任务是否成功、异步任务的结果、
       异步的错误信息，则这些变量会随着异步
       任务的增加而变得不可管理（变量可能会被
       有意或无意地修改掉）


此时需要一个比较好解决方案，这个方案必须能够
提供一些基本的保证：
1、保证无论异步任务是否执行成功都可以随时
       添加获取结果的回调函数（不但异步任务开
      始前可以添加回调函数，任务成功之后，或
      任务已经执行失败后，也可以添加回调函数
       并且回调函数能被正常调用）
2、一旦任务的状态变成成功或失败，则任务的
      状态不会被篡改，而且任务成功时的结果或
     任务失败时的错误信息都会被保留且不会被
      篡改
























